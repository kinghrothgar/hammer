#!/usr/bin/python2.6
import curses
import time
import optparse
import readers
import sys
import templates
import re
from string import Template

# Takes two dictionaries, returns one dictionary
def compare(original, current):
    delta = {}
    for data in original.keys():
        delta[data] = str(int(current[data])\
                            -int(original[data]))
    return delta


# Takes two nested dictionaries, returns one nested dictionary
def compare_nested(original, current):
    delta = {}
    for name in original.keys():
        delta[name] = {}
        for data in original[name].keys():
            delta[name][data] = str(int(current[name][data])\
                                -int(original[name][data]))
    return delta


def get_link_data(interfaces):
    if opts.link == 'all':
        data = readers.ip_s_link(interfaces.keys())
    else:
        try: interfaces[opts.link]
        except KeyError: sys.exit("error: %s is not a valid interface" % opts.link)
        data = readers.ip_s_link([opts.link])
    return data


# Takes a curses window
# Exits if key is q, else returns key
def get_key(stdscr):
    stdscr.nodelay(True) # make getkey not wait
    try: key = stdscr.getkey()
    except: key = None
    else: return key


def link(stdscr):
    interfaces = readers.ip_a()
    original_data = get_link_data(interfaces)
    output = None
    while True:
        # Get key and deal with it
        key = get_key(stdscr)
        if key == 'q':
            return output 
        if key == 'r':
            opts.start_time=time.strftime("%X", time.localtime())
            original_data = get_link_data(interfaces)
        
        current_data = get_link_data(interfaces)
        delta_data = compare_nested(original_data, current_data)
        current_time=time.strftime("%X", time.localtime())
        output = Template(templates.header).safe_substitute(command='ip -s link', delta=opts.delay, 
                                                            start_time=opts.start_time, current_time=current_time)
        for name in delta_data.keys():
            ips = ', '.join(interfaces[name]['ipv4'])
            # Substitute the delta values into the template
            section = Template(templates.link).safe_substitute(delta_data[name], ips=ips, name=name)
            # Substitute the absolute values in
            section = section.replace('_abso', '')
            section = Template(section).safe_substitute(current_data[name])
            output += section + "\n\n"
        stdscr.addstr(0, 0, output)
        stdscr.refresh()
        time.sleep(opts.delay)


def ip(stdscr):
    sect_list = ['Ip','IpExt']
    original_data = readers.netstat_s(sect_list)
    output = None
    while True:
        # Get key and deal with it
        key = get_key(stdscr)
        if key == 'q':
            return output 
        elif key == 'r':
            opts.start_time=time.strftime("%X", time.localtime())
            original_data = readers.netstat_s(sect_list)
        elif key == '+':
            opts.delay += 1
        elif key == '-':
            if opts.delay > 0: opts.delay -= 1
        else: output = key + "\n"
        
        current_data = readers.netstat_s(sect_list)
        delta_data = compare(original_data, current_data)
        current_time=time.strftime("%X", time.localtime())
        output += Template(templates.header).safe_substitute(command='ip -s link', delta=opts.delay, 
                                                            start_time=opts.start_time, current_time=current_time)
        # Substitute the delta values into the template
        output += Template(templates.ip).safe_substitute(delta_data)
        # Substitute the absolute values in
        output = output.replace('_abso', '')
        output = Template(output).safe_substitute(current_data)
        # Remove any lines with unfilled in data
        output = re.sub('\n[^\n]+\$[^\n]+', '', output)

        stdscr.addstr(0, 0, output)
        stdscr.refresh()
        time.sleep(opts.delay)

        

# Parse settings from commandline options
# TODO: add program description including that must be run as root
# TODO: group require options (
cli_parser = optparse.OptionParser(usage='%prog [OPTIONS]')
cli_parser.add_option('-d', '--d', dest='delay', default=5, type='int', metavar='SECONDS', \
                      help="delay between updates [default: %default seconds]")
cli_parser.add_option('-l', '--link', dest='link', type='string', metavar='INTERFACE', \
                      help="PUT STUFF HERE [default: %default]")
cli_parser.add_option('-i', '--ip', dest='ip', default=False, action='store_true', \
                      help="PUT STUFF HERE")

(opts, args) = cli_parser.parse_args()

# Verify arguments
if opts.link and opts.ip:
    sys.exit('error: invalid option combination, see help')
elif not (opts.link or opts.ip):
    sys.exit('error: missing required option, see help')
elif opts.delay < 0:
    sys.exit('error: delay time cannot be less than 0')

# Set start time
opts.start_time=time.strftime("%X", time.localtime())

if opts.link:
    output = curses.wrapper(link)
elif opts.ip:
    output = curses.wrapper(ip)

print(output)
sys.exit(0)
